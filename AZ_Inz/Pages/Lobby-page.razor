@page "/lobby/{LobbyId}"
@using AZ_Inz.Classes
@using Microsoft.AspNetCore.SignalR.Client
@inject HttpClient Http
@inject CustomAuthStateProvider AuthStateProvider
@inject AuthenticationStateService AuthStateService
@inject NavigationManager Navigation

<h2>Lobby ID: @LobbyId</h2>

@if (ErrorMessage != null)
{
    <p class="error" style="color:red">@ErrorMessage</p>
}

@if (HubConnection is not null && HubConnection.State == HubConnectionState.Connected)
{
    <h3>Players in Lobby</h3>
    <ul>
        @foreach (var player in Players)
        {
            <li>@player.Nickname (@player.PlayerId)</li>
        }
    </ul>

    @if (IsHost)
    {
        <h3>Lobby Settings</h3>
        <label>Score to Win:</label>
        <input type="number" @bind="ScoreToWin" />

        <h3>Available Decks</h3>
        <ul>
            @foreach (var deck in AvailableDecks)
            {
                <li>@deck.Name</li>
            }
        </ul>

        <button @onclick="StartGame">Start Game</button>
    }
    else
    {
        <p>Waiting for the host to start the game...</p>
    }
}
else
{
    <p>Connecting to the lobby...</p>
}

@code {
    [Parameter] public string LobbyId { get; set; }

    private List<Player> Players = new();
    private List<CardDeck> AvailableDecks = new();
    private bool IsHost;
    private int ScoreToWin;
    private string ErrorMessage;
    private HubConnection? HubConnection;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            HubConnection = new HubConnectionBuilder()
            .WithUrl("https://localhost:7060/lobbyhub")
            .WithAutomaticReconnect()
            .Build();


            HubConnection.On<Player>("PlayerJoined", player =>
            {
                Players.Add(player);
                StateHasChanged();
            });

            HubConnection.On<Player>("PlayerLeft", player =>
            {
                Players.RemoveAll(p => p.PlayerId == player.PlayerId);
                StateHasChanged();
            });

            HubConnection.On("LobbyClosed", async () =>
            {
                ErrorMessage = "The lobby has been closed.";
                await HubConnection.StopAsync();
                StateHasChanged();
            });

            // Start SignalR connection
            await HubConnection.StartAsync();
            await HubConnection.SendAsync("JoinLobby", LobbyId);

            // Fetch lobby details
            var response = await Http.GetAsync($"https://localhost:7060/api/Lobby/{LobbyId}");
            if (response.IsSuccessStatusCode)
            {
                var lobby = await response.Content.ReadFromJsonAsync<Lobby>();
                if (lobby != null)
                {
                    Players = lobby.Players;
                    ScoreToWin = lobby.ScoreToWin;
                    AvailableDecks = lobby.SelectedDecks;

                    var authState = await AuthStateProvider.GetAuthenticationStateAsync();
                    var userId = authState.User?.FindFirst(c => c.Type == "sub")?.Value;
                    IsHost = userId == lobby.HostId;
                }
            }
            else
            {
                var status = response.StatusCode; // e.g. 401, 404, etc.
                var reason = response.ReasonPhrase;
                var body = await response.Content.ReadAsStringAsync(); // may contain an error message

                ErrorMessage = $"HTTP {status}: {reason}, Body: {body}";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error: {ex.Message}";
        }
    }

    private async Task StartGame()
    {
        try
        {
            if (!IsHost) return;

            var response = await Http.PostAsync($"/api/lobby/start-game/{LobbyId}", null);
            if (response.IsSuccessStatusCode)
            {
                Navigation.NavigateTo($"/game/{LobbyId}");
            }
            else
            {
                ErrorMessage = "Failed to start the game.";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error: {ex.Message}";
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (HubConnection != null)
        {
            await HubConnection.DisposeAsync();
        }
    }
}

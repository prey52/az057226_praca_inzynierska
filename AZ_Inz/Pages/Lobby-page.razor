@page "/lobby/{LobbyId}"
@using Microsoft.AspNetCore.SignalR.Client
@using AZ_Inz.Classes
@inject NavigationManager Navigation
@inject CustomAuthStateProvider AuthStateProvider
@inject HttpClient Http
@inject IJSRuntime JS


<h2>Lobby ID: @LobbyId</h2>

@if (!string.IsNullOrEmpty(ErrorMessage))
{
        <p style="color:red;">@ErrorMessage</p>
}

@if (hubConnection is null || hubConnection.State != HubConnectionState.Connected)
{
        <p>Connecting to the lobby...</p>
}
else
{
        <h3>Players in Lobby</h3>
        <ul>
        @foreach (var player in Players)
        {
                    <li>@player.Nickname (@player.PlayerId)</li>
        }
        </ul>

    @if (IsHost)
    {
                <h3>Lobby Settings (Host Only)</h3>

                <div>
                    <label>Score to Win: </label>
                    <input type="number" @bind="ScoreToWin" />
                </div>

                <h4>Answer Decks</h4>
        @if (AllAnswerDecks is null)
        {
                        <p>Loading answer decks...</p>
        }
        else
        {
            @foreach (var deck in AllAnswerDecks)
            {
                                <div>
                                    <input type="checkbox"
                                           @bind="deck.IsSelected" />
                                    <label>@deck.Name</label>
                                </div>
            }
        }

                <h4>Question Decks</h4>
        @if (AllQuestionDecks is null)
        {
                        <p>Loading question decks...</p>
        }
        else
        {
            @foreach (var deck in AllQuestionDecks)
            {
                                <div>
                                    <input type="checkbox"
                                           @bind="deck.IsSelected" />
                                    <label>@deck.Name</label>
                                </div>
            }
        }

                <button @onclick="SaveLobbyOptions">Save Options</button>
                <button @onclick="StartGame">Start Game</button>
    }
    else
    {
                <p>Waiting for the host to select decks and start the game...</p>
    }
}

@code {
    [Parameter] public string LobbyId { get; set; }

    private bool isLoading = true;
    private HubConnection hubConnection;
    private string ErrorMessage;

    private List<Player> Players = new();
    private bool IsHost = false;
    private string myNickname;

    private int ScoreToWin;
    private List<AnswerDeckViewModel> AllAnswerDecks;
    private List<QuestionDeckViewModel> AllQuestionDecks;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            //Get nickname from cookie or from auth
            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            if (authState.User.Identity.IsAuthenticated)
            {
                myNickname = authState.User.Identity.Name;
            }
            else
            {
                myNickname = await JS.InvokeAsync<string>("cookieManager.getCookie", "nickname");
            }

            //SignalR hub connection
            hubConnection = new HubConnectionBuilder()
                .WithUrl("https://localhost:7060/lobbyhub")
                .WithAutomaticReconnect()
                .Build();

            //Hub events
            hubConnection.On<AnotherJoinedLobbyResponse>("PlayerJoined", OnPlayerJoined);

            await hubConnection.StartAsync();

            //Fetch the lobby details
            LobbyInfoDTO lobby = await hubConnection.InvokeAsync<LobbyInfoDTO>("GetLobbyDetails", LobbyId);
            if (lobby == null)
            {
                ErrorMessage = "Lobby not found.";
                return;
            }

            // Populate page data
            Players = lobby.Players;

            IsHost = (myNickname == lobby.HostNickname);

            await LoadAllDecks();
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error: {ex.Message}";
        }
    }

    private void OnPlayerJoined(AnotherJoinedLobbyResponse player)
    {
        Console.WriteLine("OnPlayerJoined triggered with data: " + player.Nickname);
        StateHasChanged();
    }

    // Example "LoadAllDecks" from a REST endpoint
    // so the host can choose which to enable
    private async Task LoadAllDecks()
    {
        try
        {
            var response = await Http.GetFromJsonAsync<AvailableDecksDto>("https://localhost:7060/api/Decks/all-decks");
            AllAnswerDecks = response.AnswerDecks
                .Select(ad => new AnswerDeckViewModel { Id = ad.Id, Name = ad.Name })
                .ToList();

            AllQuestionDecks = response.QuestionDecks
                .Select(qd => new QuestionDeckViewModel { Id = qd.Id, Name = qd.Name })
                .ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine("Failed to load decks: " + ex.Message);
        }
    }

    private async Task SaveLobbyOptions()
    {
        try
        {
            // We'll gather the selected deck IDs
            var chosenAnswerDeckIds = AllAnswerDecks
                .Where(d => d.IsSelected)
                .Select(d => d.Id)
                .ToList();

            var chosenQuestionDeckIds = AllQuestionDecks
                .Where(d => d.IsSelected)
                .Select(d => d.Id)
                .ToList();

            // Call the hub method
            await hubConnection.SendAsync("SetLobbyOptions", LobbyId, ScoreToWin, chosenAnswerDeckIds, chosenQuestionDeckIds);

            // After success, perhaps show a small message or update UI
            Console.WriteLine("Lobby options saved!");
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Could not save lobby options: {ex.Message}";
        }
    }

    private async Task StartGame()
    {
        // If you have a hub method "StartGame(lobbyId)", call it here
        // e.g.: await hubConnection.SendAsync("StartGame", LobbyId);
        // Then maybe navigate to /game or broadcast "GameStarted" 
        Console.WriteLine("StartGame clicked. Not implemented yet!");
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection != null)
        {
            await hubConnection.DisposeAsync();
        }
    }

    // Example models for the UI
    public class AnswerDeckViewModel
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public bool IsSelected { get; set; }
    }
    public class QuestionDeckViewModel
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public bool IsSelected { get; set; }
    }

    // Matches the shape returned by /api/Decks/all-decks
    private class AvailableDecksDto
    {
        public List<AnswerDeckDto> AnswerDecks { get; set; }
        public List<QuestionDeckDto> QuestionDecks { get; set; }
    }
    private class AnswerDeckDto
    {
        public int Id { get; set; }
        public string Name { get; set; }
    }
    private class QuestionDeckDto
    {
        public int Id { get; set; }
        public string Name { get; set; }
    }
    public class CreateLobbyDTO
    {
        public string LobbyId { get; set; }
        public string HostId { get; set; }
        public string HostNickname { get; set; }
    }
}

@page "/lobby/{LobbyId}"
@using Microsoft.AspNetCore.SignalR.Client
@using AZ_Inz.Classes
@inject NavigationManager Navigation
@inject CustomAuthStateProvider AuthStateProvider

<h2>Lobby ID: @LobbyId</h2>

@if (!string.IsNullOrEmpty(ErrorMessage))
{
        <p style="color:red">@ErrorMessage</p>
}

@if (hubConnection is null || hubConnection.State != HubConnectionState.Connected)
{
        <p>Connecting to the lobby...</p>
}
else
{
        <h3>Players in Lobby</h3>
        <ul>
        @foreach (var player in Players)
        {
                    <li>@player.Nickname (@player.PlayerId)</li>
        }
        </ul>

    @if (IsHost)
    {
                <h3>Lobby Settings</h3>
                <label>Score to Win:</label>
                <input type="number" @bind="ScoreToWin" />

                <button @onclick="StartGame">Start Game</button>
    }
    else
    {
                <p>Waiting for the host to start the game...</p>
    }
}

@code {
    [Parameter] public string LobbyId { get; set; }

    private HubConnection hubConnection;
    private List<Player> Players = new();
    private bool IsHost;
    private int ScoreToWin;
    private string ErrorMessage;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // 1. Build SignalR connection
            hubConnection = new HubConnectionBuilder()
                .WithUrl("https://localhost:7060/lobbyhub")
                .WithAutomaticReconnect()
                .Build();

            // 2. Subscribe to real-time events
            hubConnection.On<Player>("PlayerJoined", player =>
            {
                Players.Add(player);
                StateHasChanged();
            });

            hubConnection.On<Player>("PlayerLeft", player =>
            {
                Players.RemoveAll(p => p.PlayerId == player.PlayerId);
                StateHasChanged();
            });

            hubConnection.On("LobbyClosed", async () =>
            {
                ErrorMessage = "The lobby has been closed.";
                await hubConnection.StopAsync();
                StateHasChanged();
            });

            // 3. Start the connection
            await hubConnection.StartAsync();

            // 4. Call a new hub method "GetLobbyDetails"
            var lobby = await hubConnection.InvokeAsync<Lobby>("GetLobbyDetails", LobbyId);
            if (lobby == null)
            {
                ErrorMessage = "Lobby not found or error retrieving details.";
                return;
            }

            // Populate UI data
            Players = lobby.Players;
            ScoreToWin = lobby.ScoreToWin;

            // Determine if user is host
            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            var userId = authState.User?.FindFirst(c => c.Type == "sub")?.Value;
            // or if you're storing user ID in a cookie for a guest, retrieve that instead.
            IsHost = (userId == lobby.HostId);
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error: {ex.Message}";
        }
    }

    private async Task StartGame()
    {
        try
        {
            if (!IsHost) return;

            // Example: call "StartGame" hub method
            await hubConnection.SendAsync("StartGame", LobbyId);

            // Possibly navigate to /game/... 
            Navigation.NavigateTo($"/game/{LobbyId}");
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error: {ex.Message}";
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection != null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}

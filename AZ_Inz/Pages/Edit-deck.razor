@page "/edit-deck/{deckType}/{deckId:int}"
@inject HttpClient Http
@inject NavigationManager Navigation
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@using AZ_Inz.Classes.DTO

<h3>Edit Deck (@deckType)</h3>

@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <p style="color:red">@ErrorMessage</p>
}
@if (!string.IsNullOrEmpty(SuccessMessage))
{
    <p style="color:green">@SuccessMessage</p>
}

@if (IsLoading)
{
    <p>Loading...</p>
}
else
{
    <EditForm Model="@DeckCards" OnValidSubmit="@SaveChanges">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <ul style="list-style: none;">
            @foreach (var card in DeckCards)
            {
                <li>
                    <!-- checkbox for selection -->
                    <input type="checkbox" @bind="card.IsSelected" style="margin-right: 5px;" />
                    <InputText @bind-Value="card.Text" class="form-control" />
                </li>
            }
        </ul>

        <div style="margin-top: 1em;">
            <button type="button" class="btn btn-success" @onclick="AddNewCard">
                + Add New Card
            </button>

            <button type="button" class="btn btn-danger" @onclick="DeleteSelectedCards">
                Delete Selected
            </button>
        </div>

        <div style="margin-top: 1em;">
            <button type="submit" class="btn btn-primary">Save Changes</button>
            <button type="button" class="btn btn-secondary" @onclick="NavigateBack">Cancel</button>
        </div>
    </EditForm>
}

@code {
    [Parameter] public string deckType { get; set; }
    [Parameter] public int deckId { get; set; }

    private List<CardDbDTO> DeckCards = new();
    private string ErrorMessage = string.Empty;
    private string SuccessMessage = string.Empty;
    private bool IsLoading = true;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            IsLoading = true;
            var token = await LocalStorage.GetItemAsync<string>("authToken");
            if (string.IsNullOrEmpty(token))
            {
                ErrorMessage = "User is not authenticated.";
                return;
            }

            Http.DefaultRequestHeaders.Authorization =
                new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

            var response = await Http.GetAsync($"https://localhost:7060/api/decks/{deckType}/{deckId}");
            if (response.IsSuccessStatusCode)
            {
                DeckCards = await response.Content.ReadFromJsonAsync<List<CardDbDTO>>();
            }
            else
            {
                ErrorMessage = "Failed to load deck details.";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error: {ex.Message}";
        }
        finally
        {
            IsLoading = false;
        }
    }

    private void AddNewCard()
    {
        DeckCards.Add(new CardDbDTO
            {
                Id = 0,
                Text = "New Card",
                IsSelected = false
            });
    }

    private void DeleteSelectedCards()
    {
        var toRemove = DeckCards.Where(c => c.IsSelected).ToList();
        foreach (var card in toRemove)
        {
            DeckCards.Remove(card);
        }
    }

    private async Task SaveChanges()
    {
        try
        {
            IsLoading = true;
            SuccessMessage = string.Empty;

            var token = await LocalStorage.GetItemAsync<string>("authToken");
            Http.DefaultRequestHeaders.Authorization =
                new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

            var response = await Http.PutAsJsonAsync(
                $"https://localhost:7060/api/decks/{deckType}/{deckId}", DeckCards);

            if (response.IsSuccessStatusCode)
            {
                SuccessMessage = "Deck updated successfully!";
                Navigation.NavigateTo("/my-decks");
            }
            else
            {
                ErrorMessage = "Failed to save changes.";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error: {ex.Message}";
        }
        finally
        {
            IsLoading = false;
        }
    }

    private void NavigateBack()
    {
        Navigation.NavigateTo("/my-decks");
    }
}

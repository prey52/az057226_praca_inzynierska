@page "/lobby/{LobbyId}"
@using AZ_Inz.Classes
@using Microsoft.AspNetCore.SignalR.Client
@inject HttpClient Http
@inject CustomAuthStateProvider AuthStateProvider
@inject AuthenticationStateService AuthStateService
@inject NavigationManager Navigation


<h2>Lobby ID: @LobbyId</h2>

@if (IsHost)
{
    <h3>Host Controls</h3>
    <div>
        <label>Score to Win:</label>
        <input type="number" @bind="ScoreToWin" min="1" />
    </div>
    <div>
        <h4>Select Card Decks</h4>
        <ul>
            @foreach (var deck in AvailableDecks)
            {
                <li>
                    <input type="checkbox" @bind="deck.Selected" /> @deck.Name
                </li>
            }
        </ul>
    </div>
    <button @onclick="StartGame">Start Game</button>
}
else
{
    <h3>Players in the Lobby</h3>
    <ul>
        @foreach (var player in Players)
        {
            <li>@player.Nickname</li>
        }
    </ul>
    <p>Waiting for the host to start the game...</p>
}

@code {
    [Parameter] public string LobbyId { get; set; }

    private List<Player> Players = new();
    private List<CardDeck> AvailableDecks = new();
    private bool IsHost;
    private int ScoreToWin;
    private HubConnection? HubConnection;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var userId = authState.User.Identity.Name;

        Console.WriteLine($"Current UserId: {userId}");

        var lobby = await Http.GetFromJsonAsync<AZ_Inz.Classes.Lobby>($"https://localhost:7060/api/lobby/{LobbyId}");

        if (lobby == null)
        {
            Navigation.NavigateTo("/");
            return;
        }

        Console.WriteLine($"Lobby HostId: {lobby.HostId}");

        // Determine if the current user is the host
        IsHost = lobby.HostId == userId;
        StateHasChanged();

        Console.WriteLine($"IsHost: {IsHost}");

        // Load lobby data
        Players = lobby.Players;

        // Load available card decks (mocked for now)
        AvailableDecks = new List<CardDeck>
    {
        new CardDeck { Name = "Deck 1", Selected = false },
        new CardDeck { Name = "Deck 2", Selected = false },
        new CardDeck { Name = "Deck 3", Selected = false }
    };

        // Connect to SignalR hub
        HubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/lobbyHub"))
            .Build();

        HubConnection.On<Player>("PlayerJoined", player =>
        {
            Players.Add(player);
            StateHasChanged();
        });

        await HubConnection.StartAsync();
    }


    private async Task StartGame()
    {
        var selectedDecks = AvailableDecks.Where(d => d.Selected).Select(d => d.Name).ToList();

        var response = await Http.PostAsJsonAsync("https://localhost:7060/api/lobby/update-lobby", new LobbyUpdateDto
            {
                LobbyId = LobbyId,
                SelectedDecks = selectedDecks,
                ScoreToWin = ScoreToWin
            });

        if (response.IsSuccessStatusCode)
        {
            // Notify players the game has started
            await HubConnection.SendAsync("GameStarted", LobbyId);
        }
    }
}

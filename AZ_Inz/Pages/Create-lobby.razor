@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@using System.Security.Claims
@using AZ_Inz.Classes
@using AZ_Inz.Classes.DTO
@inject CustomAuthStateProvider AuthStateProvider
@inject CustomAuthStateProvider AuthStateProvider
@inject NavigationManager NavigationManager
@inject IJSRuntime JS

<h2>Lobby Management (Hub-Only)</h2>

@if (isLoading)
{
    <p>Loading...</p>
}
else
{
    @if (!_isAuthenticated)
    {
        <label for="nickname">Nickname</label>
        <input type="text" id="nickname" @bind="Nickname" />
    }
    else
    {
        <p>You are logged in as: @_loggedUserDisplayName</p>
    }

    <div>
        <button @onclick="CreateLobby">Create Lobby</button>
    </div>

    <div style="margin-top: 20px;">
        <h3>Join Lobby</h3>
        <label for="lobbyId">Lobby ID:</label>
        <input type="text" id="lobbyId" @bind="LobbyId" required />
        <button @onclick="JoinLobby">Join Lobby</button>
    </div>

    @if (!string.IsNullOrEmpty(ErrorMessage))
    {
        <p style="color:red;">@ErrorMessage</p>
    }
}

@code {
    // Fields
    private HubConnection? hubConnection;
    private bool isLoading = true;
    private bool _isAuthenticated;

    private string Nickname;              // for anonymous users
    private string LobbyId;
    private string ErrorMessage;
    private string _loggedUserDisplayName; // for logged-in users

    protected override async Task OnInitializedAsync()
    {
        try
        {
            //If user is authenticated
            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            _isAuthenticated = authState.User.Identity?.IsAuthenticated == true;

            if (_isAuthenticated)
            {
                _loggedUserDisplayName = authState.User.FindFirst(ClaimTypes.Name)?.Value
                                         ?? "Authenticated User";
            }

            //SignalR hub connection
            hubConnection = new HubConnectionBuilder()
                .WithUrl("https://localhost:7060/lobbyhub")
                .WithAutomaticReconnect()
                .Build();

            //Hub events
            hubConnection.On<LobbyCreatedResponseDTO>("LobbyCreated", OnLobbyCreated);
            hubConnection.On<JoinedLobbyResponseDTO>("JoinedLobby", OnJoinedLobby);

            hubConnection.On<Exception>("OnError", e =>
            {
                Console.WriteLine("Hub error: " + e.Message);
            });

            //Built-in events:
            hubConnection.Closed += async (ex) =>
            {
                Console.WriteLine("Connection closed with error: " + ex?.Message);
            };
            hubConnection.Reconnecting += (ex) =>
            {
                Console.WriteLine("Reconnecting because: " + ex?.Message);
                return Task.CompletedTask;
            };

            await hubConnection.StartAsync();
            Console.WriteLine("Hub connection started. State: " + hubConnection.State);
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Could not connect to hub: {ex.Message}";
            Console.WriteLine(ErrorMessage);
        }

        isLoading = false;
        StateHasChanged();
    }

    private async Task CreateLobby()
    {
        try
        {
            ErrorMessage = string.Empty;

            if (!_isAuthenticated && string.IsNullOrWhiteSpace(Nickname))
            {
                ErrorMessage = "Nickname is required for unauthenticated users.";
                return;
            }

            var nameToUse = _isAuthenticated ? _loggedUserDisplayName : Nickname;

            // Save the nickname to a cookie for unauthenticated users
            if (!_isAuthenticated)
            {
                await JS.InvokeVoidAsync("cookieManager.setCookie", "nickname", Nickname, 1);
            }

            await hubConnection.SendAsync("CreateLobby", nameToUse);
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error creating lobby: {ex.Message}";
        }
    }


    private async void JoinLobby()
    {
        ErrorMessage = string.Empty;

        // If user is anonymous, require a nickname
        if (!_isAuthenticated && string.IsNullOrWhiteSpace(Nickname))
        {
            ErrorMessage = "Nickname is required for unauthenticated users to join a lobby.";
            return;
        }
        if (string.IsNullOrWhiteSpace(LobbyId))
        {
            ErrorMessage = "Lobby ID cannot be empty.";
            return;
        }

        // Decide a name to display
        var nameToUse = _isAuthenticated ? _loggedUserDisplayName : Nickname;

        Console.WriteLine($"Joining lobby with Nickname = {nameToUse}");

        try
        {
            if (hubConnection is null || hubConnection.State != HubConnectionState.Connected)
            {
                ErrorMessage = "Not connected to the hub.";
                return;
            }

            Console.WriteLine($"Sending JoinLobby({LobbyId}, {nameToUse}) to hub...");
            await hubConnection.SendAsync("JoinLobby", LobbyId, nameToUse);
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error joining lobby: {ex.Message}";
            Console.WriteLine(ErrorMessage);
        }
    }


    private void OnLobbyCreated(LobbyCreatedResponseDTO data)
    {
        Console.WriteLine("OnLobbyCreated triggered with data: " + data.LobbyId);

        if (!string.IsNullOrEmpty(data.LobbyId))
        {
            NavigationManager.NavigateTo($"/lobby/{data.LobbyId}");
        }
        else
        {
            ErrorMessage = "Failed to parse LobbyCreated data.";
        }
    }

    private void OnJoinedLobby(JoinedLobbyResponseDTO data)
    {
        Console.WriteLine($"OnJoinedLobby triggered with LobbyId = {data.LobbyId}, Players count = {data.Players.Count}");

        if (!string.IsNullOrEmpty(data.LobbyId))
        {
            NavigationManager.NavigateTo($"/lobby/{data.LobbyId}");
        }
        else
        {
            ErrorMessage = "Failed to parse JoinedLobby data.";
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection != null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}

@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@using System.Security.Claims
@inject CustomAuthStateProvider AuthStateProvider
@inject CustomAuthStateProvider AuthStateProvider
@inject NavigationManager NavigationManager

<h2>Lobby Management (Hub-Only)</h2>

@if (isLoading)
{
    <p>Loading...</p>
}
else
{
    @if (!_isAuthenticated)
    {
        <label for="nickname">Nickname</label>
        <input type="text" id="nickname" @bind="Nickname" />
    }
    else
    {
        <p>You are logged in as: @_loggedUserDisplayName</p>
    }

    <div>
        <button @onclick="CreateLobby">Create Lobby</button>
    </div>

    <div style="margin-top: 20px;">
        <h3>Join Lobby</h3>
        <label for="lobbyId">Lobby ID:</label>
        <input type="text" id="lobbyId" @bind="LobbyId" required />
        <button @onclick="JoinLobby">Join Lobby</button>
    </div>

    <div>
        <button @onclick="Ping">Ping</button>
    </div>

    @if (!string.IsNullOrEmpty(ErrorMessage))
    {
        <p style="color:red;">@ErrorMessage</p>
    }
}

@code {
    // Fields
    private HubConnection? hubConnection;
    private bool isLoading = true;
    private bool _isAuthenticated;

    private string Nickname;              // for anonymous users
    private string LobbyId;
    private string ErrorMessage;
    private string _loggedUserDisplayName; // for logged-in users

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // 1. Determine if user is authenticated
            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            _isAuthenticated = authState.User.Identity?.IsAuthenticated == true;

            // If logged in, get the display name or fallback
            if (_isAuthenticated)
            {
                _loggedUserDisplayName = authState.User.FindFirst(ClaimTypes.Name)?.Value
                                         ?? "Authenticated User";
            }

            // 2. Build and start the SignalR hub connection
            hubConnection = new HubConnectionBuilder()
                .WithUrl("https://localhost:7060/lobbyhub")    // Adjust if needed
                .WithAutomaticReconnect()
                .Build();

            // 3. Subscribe to hub events
            hubConnection.On<object>("LobbyCreated", OnLobbyCreated);
            hubConnection.On<object>("JoinedLobby", OnJoinedLobby);
            hubConnection.On<object>("PlayerJoined", OnPlayerJoined);

            hubConnection.On<Exception>("OnError", e =>
            {
                Console.WriteLine("Hub error: " + e.Message);
            });

            // Also consider hooking into built-in events:
            hubConnection.Closed += async (ex) =>
            {
                Console.WriteLine("Connection closed with error: " + ex?.Message);
            };
            hubConnection.Reconnecting += (ex) =>
            {
                Console.WriteLine("Reconnecting because: " + ex?.Message);
                return Task.CompletedTask;
            };

            await hubConnection.StartAsync();
            Console.WriteLine("Hub connection started. State: " + hubConnection.State);
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Could not connect to hub: {ex.Message}";
            Console.WriteLine(ErrorMessage);
        }

        isLoading = false;
        StateHasChanged();
    }

    private async void Ping()
    {
        Console.WriteLine("Sending ping");
        await hubConnection.SendAsync("Ping");
    }

    private async void CreateLobby()
    {
        ErrorMessage = string.Empty;

        // If user is anonymous, require a nickname
        if (!_isAuthenticated && string.IsNullOrWhiteSpace(Nickname))
        {
            ErrorMessage = "Nickname is required for unauthenticated users to create a lobby.";
            return;
        }

        // Choose which name to pass to the hub
        var nameToUse = _isAuthenticated ? _loggedUserDisplayName : Nickname;

        try
        {
            if (hubConnection is null || hubConnection.State != HubConnectionState.Connected)
            {
                ErrorMessage = "Not connected to the hub.";
                return;
            }

            Console.WriteLine($"Sending CreateLobby({nameToUse}) to hub...");
            await hubConnection.SendAsync("CreateLobby", nameToUse);
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error creating lobby: {ex.Message}";
            Console.WriteLine(ErrorMessage);
        }
    }

    private async void JoinLobby()
    {
        ErrorMessage = string.Empty;

        // If user is anonymous, require a nickname
        if (!_isAuthenticated && string.IsNullOrWhiteSpace(Nickname))
        {
            ErrorMessage = "Nickname is required for unauthenticated users to join a lobby.";
            return;
        }
        if (string.IsNullOrWhiteSpace(LobbyId))
        {
            ErrorMessage = "Lobby ID cannot be empty.";
            return;
        }

        var nameToUse = _isAuthenticated ? _loggedUserDisplayName : Nickname;

        try
        {
            if (hubConnection is null || hubConnection.State != HubConnectionState.Connected)
            {
                ErrorMessage = "Not connected to the hub.";
                return;
            }

            Console.WriteLine($"Sending JoinLobby({LobbyId}, {nameToUse}) to hub...");
            await hubConnection.SendAsync("JoinLobby", LobbyId, nameToUse);
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error joining lobby: {ex.Message}";
            Console.WriteLine(ErrorMessage);
        }
    }

    // Called when the hub calls: Clients.Caller.SendAsync("LobbyCreated", ...)
    private void OnLobbyCreated(object lobbyData)
    {
        Console.WriteLine("OnLobbyCreated triggered with data: " + lobbyData);

        // Typically it's an anonymous object. We can parse it with dynamic or Dictionary
        var dict = lobbyData as Dictionary<string, object>;
        if (dict != null && dict.ContainsKey("LobbyId"))
        {
            var newLobbyId = dict["LobbyId"]?.ToString();
            if (!string.IsNullOrEmpty(newLobbyId))
            {
                // Navigate to the /lobby/:id page
                NavigationManager.NavigateTo($"/lobby/{newLobbyId}");
            }
        }
        else
        {
            ErrorMessage = "Failed to parse LobbyCreated data.";
        }
    }

    // Called when the hub calls: Clients.Caller.SendAsync("JoinedLobby", ...)
    private void OnJoinedLobby(object lobbyData)
    {
        Console.WriteLine("OnJoinedLobby triggered with data: " + lobbyData);

        var dict = lobbyData as Dictionary<string, object>;
        if (dict != null && dict.ContainsKey("LobbyId"))
        {
            var joinedLobbyId = dict["LobbyId"]?.ToString();
            if (!string.IsNullOrEmpty(joinedLobbyId))
            {
                NavigationManager.NavigateTo($"/lobby/" + joinedLobbyId);
            }
        }
        else
        {
            ErrorMessage = "Failed to parse JoinedLobby data.";
        }
    }

    // Called when the hub calls: Clients.OthersInGroup(lobbyId).SendAsync("PlayerJoined", player)
    private void OnPlayerJoined(object playerData)
    {
        Console.WriteLine("OnPlayerJoined triggered with data: " + playerData);
        // In the main page, we might do nothing. In the /lobby/:id page,
        // we would refresh the player list, etc.
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection != null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}

@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@using System.Net.Http.Headers;
@using Pages;
@using AZ_Inz.Classes
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject CustomAuthStateProvider AuthStateProvider
@inject AuthenticationStateService AuthStateService

<h2>Lobby Management</h2>

@if (isLoading)
{
    <p>Loading...</p> <!-- You can show a loading spinner or message -->
}
else
{
    @if (!AuthStateService.IsAuthenticated)
    {
        <label for="nickname">Nickname</label>
        <input type="text" id="nickname" @bind="Nickname" />
    }

    <div>
        <button @onclick="CreateLobby">Create Lobby</button>
    </div>

    <div style="margin-top: 20px;">
        <h3>Join Lobby</h3>
        <form @onsubmit="JoinLobby">
            <label for="lobbyId">Lobby ID:</label>
            <input type="text" id="lobbyId" @bind="LobbyId" required />
            <button type="submit">Join Lobby</button>
        </form>
    </div>

    @if (!string.IsNullOrEmpty(ErrorMessage))
    {
        <p style="color:red;">@ErrorMessage</p>
    }
}

@code {
    private string LobbyId;
    private string ErrorMessage;
    private string Nickname;
    private bool isLoading = true; // This flag will be used to determine if we're still checking authentication

    // This method runs when the component is first rendered and ensures we know the authentication state
    protected override async Task OnInitializedAsync()
    {
        // Wait for authentication state to be ready
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();

        // Now we can safely check the authentication state
        if (authState.User.Identity.IsAuthenticated)
        {
            // The user is authenticated, handle this case if necessary
        }

        isLoading = false; // Done loading, trigger re-render
        StateHasChanged(); // Re-render the component
    }

    private async Task CreateLobby()
    {
        try
        {
            var token = await LocalStorage.GetItemAsync<string>("authToken");
            var createRequest = new
            {
                Nickname = string.IsNullOrEmpty(token) ? Nickname : null
            };

            if (string.IsNullOrEmpty(token) && string.IsNullOrEmpty(Nickname))
            {
                ErrorMessage = "Nickname is required for unauthenticated users.";
                return;
            }

            var request = new HttpRequestMessage(HttpMethod.Post, "https://localhost:7060/api/lobby/create-lobby");

            if (!string.IsNullOrEmpty(token))
            {
                request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", token);
            }

            request.Content = JsonContent.Create(createRequest);

            var response = await Http.SendAsync(request);

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<LobbyResponse>();
                NavigationManager.NavigateTo($"/lobby/{result.LobbyId}");
            }
            else
            {
                var errorDetails = await response.Content.ReadAsStringAsync();
                ErrorMessage = $"Failed to create lobby. {errorDetails}";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error: {ex.Message}";
        }
    }

    private async Task JoinLobby()
    {
        try
        {
            var token = await LocalStorage.GetItemAsync<string>("authToken");

            var joinRequest = new
            {
                LobbyId,
                Nickname = string.IsNullOrEmpty(token) ? Nickname : null
            };

            if (string.IsNullOrEmpty(token) && string.IsNullOrEmpty(Nickname))
            {
                ErrorMessage = "Nickname is required for unauthenticated users.";
                return;
            }

            var request = new HttpRequestMessage(HttpMethod.Post, "https://localhost:7060/api/lobby/join-lobby");

            if (!string.IsNullOrEmpty(token))
            {
                request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", token);
            }

            request.Content = JsonContent.Create(joinRequest);

            var response = await Http.SendAsync(request);

            if (response.IsSuccessStatusCode)
            {
                NavigationManager.NavigateTo($"/lobby/{LobbyId}");
            }
            else
            {
                var errorDetails = await response.Content.ReadAsStringAsync();
                ErrorMessage = $"Failed to join lobby. {errorDetails}";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error: {ex.Message}";
        }
    }

    private class LobbyResponse
    {
        public string LobbyId { get; set; }
    }
}

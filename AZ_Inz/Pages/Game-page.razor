@page "/game/{GameId}"

@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Navigation
@inject IJSRuntime JS
@inject CustomAuthStateProvider AuthStateProvider
@using AZ_Inz.Classes
@using AZ_Inz.Classes.DTO

<h2>Game ID: @GameId</h2>

@if (gameHubConnection is null || gameHubConnection.State != HubConnectionState.Connected)
{
    <p>Connecting to the game...</p>
}
else
{
    <h3>Question Player: @CurrentQuestionPlayer</h3>
    <h4>@CurrentQuestion?.Text</h4>

    <div>
        <h4>Your Hand</h4>
        <ul>
            @foreach (var card in MyHand)
            {
                <li>
                    @card.Text
                    <button @onclick="@(() => PlayCard(card.Id))">Play</button>
                </li>
            }
        </ul>
    </div>
}

@code {
    [Parameter] public string GameId { get; set; }

    private HubConnection gameHubConnection;
    private string Nickname;
    private string CurrentQuestionPlayer;
    private CardDTO CurrentQuestion;
    private List<CardDTO> MyHand = new();

    protected override async Task OnInitializedAsync()
    {
        //Get nickname
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        if (authState.User.Identity.IsAuthenticated)
        {
            Nickname = authState.User.Identity.Name;
        }
        else
        {
            Nickname = await JS.InvokeAsync<string>("cookieManager.getCookie", "nickname");
        }

        //SignalR hub connection
        gameHubConnection = new HubConnectionBuilder()
            .WithUrl("https://localhost:7060/gamehub")
            .WithAutomaticReconnect()
            .Build();

        //Hub events
        gameHubConnection.On<List<CardDTO>>("ReceiveHand", OnReceiveHand);
        gameHubConnection.On<string>("StartGame", OnStartGame);


        await gameHubConnection.StartAsync();

        await gameHubConnection.SendAsync("JoinGame", GameId, Nickname);
    }

    private void OnStartGame(string data)
    {
        StateHasChanged(); 
    }

    private void OnReceiveHand(List<CardDTO> hand)
    {
        Console.WriteLine("test: hand");
        foreach(var card in hand)
        {
            Console.WriteLine(card.Text);
        }
        
        MyHand = hand;
        StateHasChanged();
    }

    private async Task PlayCard(int cardId)
    {
        // call "PlayCards" with a single ID or multiple
        await gameHubConnection.SendAsync("PlayCards", GameId, Nickname, new List<int> { cardId });

        // Remove from MyHand or wait for server "RoundUpdated"

    }
}
        
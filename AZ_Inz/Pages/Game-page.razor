@* @page "/game/{LobbyId}"

@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Navigation
@inject IJSRuntime JS
@inject CustomAuthStateProvider AuthStateProvider

<h2>Game ID: @LobbyId</h2>

@if (hubConnection is null || hubConnection.State != HubConnectionState.Connected)
{
    <p>Connecting to the game...</p>
}
else
{
    <h3>Question Player: @CurrentQuestionPlayer</h3>
    <h4>@CurrentQuestion?.Text</h4>

    <div>
        <h4>Your Hand</h4>
        <ul>
            @foreach (var card in MyHand)
            {
                <li>
                    @card.Text
                    <button @onclick="@(() => PlayCard(card.Id))">Play</button>
                </li>
            }
        </ul>
    </div>
}

@code {
    [Parameter] public string LobbyId { get; set; }

    private HubConnection hubConnection;
    private string Nickname;
    private string CurrentQuestionPlayer;
    //private QuestionCard CurrentQuestion;
    //private List<AnswerCard> MyHand = new();

    protected override async Task OnInitializedAsync()
    {
        // 1) Get user nickname
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        if (authState.User.Identity.IsAuthenticated)
        {
            Nickname = authState.User.Identity.Name;
        }
        else
        {
            Nickname = await JS.InvokeAsync<string>("cookieManager.getCookie", "nickname");
        }

        // 2) Connect to gamehub
        hubConnection = new HubConnectionBuilder()
            .WithUrl("https://localhost:7060/gamehub")
            .WithAutomaticReconnect()
            .Build();



        // 3) Subscribe to events
        hubConnection.On<object>("GameStarted", OnGameStarted);
        hubConnection.On<string>("PlayerJoinedGame", OnPlayerJoinedGame);
        hubConnection.On<object>("RoundUpdated", OnRoundUpdated);

        await hubConnection.StartAsync();

        // 4) Join the game
        await hubConnection.SendAsync("JoinGame", LobbyId, Nickname);
    }

    private void OnGameStarted(object data)
    {
        // parse or strongly-type
        // Possibly set CurrentQuestion, ScoreToWin, etc.
        Console.WriteLine("Game started!");
        StateHasChanged();
    }

    private void OnPlayerJoinedGame(string newPlayer)
    {
        // do something like show a message
        Console.WriteLine($"Player joined game: {newPlayer}");
        StateHasChanged();
    }

    private void OnRoundUpdated(object data)
    {
        // e.g. parse new question, new hands, etc.
    }

    private async Task PlayCard(int cardId)
    {
        // call "PlayCards" with a single ID or multiple
        await hubConnection.SendAsync("PlayCards", LobbyId, Nickname, new List<int> { cardId });
        // Remove from MyHand or wait for server "RoundUpdated"
    }
}
         *@
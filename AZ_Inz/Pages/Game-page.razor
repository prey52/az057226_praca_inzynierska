@page "/game/{GameId}"

@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Navigation
@inject IJSRuntime JS
@inject CustomAuthStateProvider AuthStateProvider
@using AZ_Inz.Classes
@using AZ_Inz.Classes.DTO

<h2>Game ID: @GameId</h2>
<h2>My nick: @myNickname</h2>

@if (gameHubConnection is null || gameHubConnection.State != HubConnectionState.Connected)
{
	<p>Connecting to the game...</p>
}
else
{
	<h3>Card Czar: @CurrentCardCzar</h3>

	<div>
		<h4>Players:</h4>
		<ul>
			@foreach (var player in Players)
			{
				<li>@player.Nickname: @player.Score</li>
			}
		</ul>
	</div>

	<div class="black-card">
		@CurrentQuestion?.Text
	</div>

	<div>
		<h4>My Hand</h4>

		@if (isGameOver)
		{
			<p style="color: red;">GAME OVER.</p>
		}
		else
		{
			<!-- existing UI -->
			@if (IsCardCzar)
			{
				<p>You are the card czar. You cannot play any answers this round.</p>
			}
			else if (playedCount >= (CurrentQuestion?.Number ?? 1))
			{
				<p>You have already played the required number of cards for this question.</p>
			}
			else
			{
				<p> You must play @((CurrentQuestion?.Number ?? 1) - playedCount) more card(s). </p>
			}

			<div class="card-container">
				@foreach (var card in MyHand)
				{
					<button class="card-button"
							@onclick="() => PlaySingleCard(card.Id)"
							disabled="@(IsCardCzar || playedCount >= (CurrentQuestion?.Number ?? 1))">
						@card.Text
					</button>
				}
			</div>

		}
	</div>

	@if (IsCardCzar && AllAnswersInList != null)
	{
		<h3>Pick a Winner:</h3>
		@foreach (var answerSet in AllAnswersInList)
		{
			<div style="margin-bottom: 1em;">
				<div class="answer-set-container">
					@foreach (var card in answerSet.AnswerCards)
					{
						<div class="answer-card">
							@card.Text
						</div>
					}
				</div>

				<button @onclick="() => ChooseWinner(answerSet.Nickname, answerSet.CardIds)">
					Pick This Set
				</button>
			</div>
		}
	}
}

@code {
	[Parameter] public string GameId { get; set; }

	private HubConnection gameHubConnection;
	private string myNickname;

	private QuestionCardDTO CurrentQuestion;
	private List<Player> Players = new();
	private string CurrentCardCzar;
	private bool IsCardCzar;
	private List<AnswerCardDTO> MyHand = new();

	private int playedCount = 0;
	private bool isGameOver = false; // NEW

	private List<PlayedCardsDTO> AllAnswersInList = null;

	protected override async Task OnInitializedAsync()
	{
		var authState = await AuthStateProvider.GetAuthenticationStateAsync();
		if (authState.User.Identity.IsAuthenticated)
		{
			myNickname = authState.User.Identity.Name;
		}
		else
		{
			myNickname = await JS.InvokeAsync<string>("cookieManager.getCookie", "nickname");
		}

		gameHubConnection = new HubConnectionBuilder()
			.WithUrl("https://localhost:7060/gamehub")
			.WithAutomaticReconnect()
			.Build();

		// Subscribe to events
		gameHubConnection.On<List<AnswerCardDTO>>("ReceiveHand", hand =>
		{
			MyHand = hand;
			StateHasChanged();
		});

		gameHubConnection.On<List<AnswerCardDTO>>("ReceiveHand", hand =>
			{
				MyHand = hand;
				StateHasChanged();
			});

		// "AllAnswersIn"
		gameHubConnection.On<List<PlayedCardsDTO>>("AllAnswersIn", (answers) =>
		{
			AllAnswersInList = answers;
			StateHasChanged();
		});

		// "WinnerChosen"
		gameHubConnection.On<object>("WinnerChosen", data =>
		{
			Console.WriteLine("A winner was chosen => refresh state");
			_ = RefreshFullGameState();
		});

		// "RoundStarted"
		gameHubConnection.On("RoundStarted", async () =>
		{
			Console.WriteLine("Received RoundStarted => RefreshFullGameState");
			await RefreshFullGameState();
		});

		gameHubConnection.On<object>("GameOver", data =>
		{
			// The server might pass Winner in data, but let’s just store a bool
			isGameOver = true;
			Console.WriteLine("GameOver => Disabling UI. The winner is: " + data);
			StateHasChanged();
		});


		await gameHubConnection.StartAsync();
		await gameHubConnection.SendAsync("JoinGame", GameId, myNickname);

		await RefreshFullGameState();
	}

	private async Task RefreshFullGameState()
	{
		// We pass 'myNickname' to the method "GetFullGameState"
		var dto = await gameHubConnection.InvokeAsync<ExtendedGameStateDTO>(
			"GetFullGameState", GameId, myNickname);

		CurrentQuestion = dto.CurrentQuestion;
		CurrentCardCzar = dto.CurrentCzar;
		Players = dto.Players;
		MyHand = dto.MyHand;

		IsCardCzar = (CurrentCardCzar == myNickname);

		playedCount = 0;
		AllAnswersInList = null;
		StateHasChanged();
	}

	private async Task PlaySingleCard(int cardId)
	{
		if (IsCardCzar) return;
		if (playedCount >= (CurrentQuestion?.Number ?? 1)) return;

		var chosenCardIds = new List<int> { cardId };
		await gameHubConnection.SendAsync("CardsPlayed", GameId, myNickname, chosenCardIds);

		// local remove
		var card = MyHand.FirstOrDefault(c => c.Id == cardId);
		if (card != null)
		{
			MyHand.Remove(card);
		}

		playedCount++;
		StateHasChanged();
	}

	private async Task ChooseWinner(string winnerNickname, List<int> cardIds)
	{
		// pass the data to the server
		await gameHubConnection.SendAsync("ChooseWinner", GameId, myNickname, winnerNickname, cardIds);
	}
}

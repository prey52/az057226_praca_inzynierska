@page "/game/{GameId}"

@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Navigation
@inject IJSRuntime JS
@inject CustomAuthStateProvider AuthStateProvider
@using AZ_Inz.Classes
@using AZ_Inz.Classes.DTO

<h2>Game ID: @GameId</h2>
<h2>My nick: @myNickname</h2>

@if (gameHubConnection is null || gameHubConnection.State != HubConnectionState.Connected)
{
    <p>Connecting to the game...</p>
}
else
{
    <h3>Question Player: @CurrentCardCzar</h3>
    <h4>@CurrentQuestion?.Text</h4>

    <div>
        <h4>Players:</h4>
        <ul>
            @foreach (var player in Players)
            {
                <li>
                    @player.Nickname: @player.Score
                </li>
            }
        </ul>
    </div>

    <div>
        <h4>Your Hand</h4>
        <ul>
            @foreach (var card in MyHand)
            {
                <li>
                    @card.Text
                    <button @onclick="@(() => PlayCard(card.Id))">Play</button>
                </li>
            }
        </ul>
    </div>
}

@code {
    [Parameter] public string GameId { get; set; }

    private HubConnection gameHubConnection;

    private string myNickname;

    private QuestionCardDTO CurrentQuestion;
    private List<Player> Players = new();
    private string CurrentCardCzar;

    private bool IsCardCzar;
    private List<AnswerCardDTO> MyHand = new();
    private List<PlayedCardsDTO> playedCards = new (); //list containing nickname and List<AnswerCardDTO>

    protected override async Task OnInitializedAsync()
    {
        //Get nickname
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        if (authState.User.Identity.IsAuthenticated)
        {
            myNickname = authState.User.Identity.Name;
        }
        else
        {
            myNickname = await JS.InvokeAsync<string>("cookieManager.getCookie", "nickname");
        }

        //SignalR hub connection
        gameHubConnection = new HubConnectionBuilder()
            .WithUrl("https://localhost:7060/gamehub")
            .WithAutomaticReconnect()
            .Build();

        //Hub events
        gameHubConnection.On<List<AnswerCardDTO>>("ReceiveHand", hand =>
        {
            MyHand = hand;
            StateHasChanged(); //
        });
        gameHubConnection.On<string>("PlayRound", OnPlayRound);

        await gameHubConnection.StartAsync();

        await gameHubConnection.SendAsync("JoinGame", GameId, myNickname);
        OnPlayRound(GameId);
    }

    public async Task OnPlayRound(string data)
    {
        GameInfoDTO gameInfo = await gameHubConnection.InvokeAsync<GameInfoDTO>("GetGameInfo", GameId);
        CurrentQuestion = gameInfo.CurrentQuestionCard;
        Players = gameInfo.Players;
        CurrentCardCzar = gameInfo.CardCzar;
        if (CurrentCardCzar == myNickname)
        {
            IsCardCzar = true;
        }
        else IsCardCzar = false;

        StateHasChanged();
    }

    private async Task PlayCard(int cardId)
    {
        await gameHubConnection.SendAsync("CardsPlayed", GameId, myNickname, new List<int> { cardId });
    }
}

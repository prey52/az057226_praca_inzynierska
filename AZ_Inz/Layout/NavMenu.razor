@inherits LayoutComponentBase
@inject CustomAuthStateProvider AuthStateProvider
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">Cards</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@NavMenuCssClass nav-scrollable" @onclick="ToggleNavMenu">
    <nav class="flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="bi bi-house-door-fill-nav-menu" aria-hidden="true"></span> Home
            </NavLink>
        </div>

        @if (!IsAuthenticated)
        {
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="login">
                    <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> Login
                </NavLink>
            </div>
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="register">
                    <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> Register
                </NavLink>
            </div>
        }
        else
        {
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="upload-deck">
                    <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> Upload deck
                </NavLink>
            </div>
            <div class="nav-item px-3">
                <button class="nav-link btn btn-link" @onclick="Logout">
                    <span class="bi bi-box-arrow-right-nav-menu" aria-hidden="true"></span> Logout
                </button>
            </div>
        }
    </nav>
</div>

@code {
    private bool collapseNavMenu = true;
    private bool IsAuthenticated = false;

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    // This method toggles the collapse state of the navigation menu
    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    // This method checks authentication status during initialization
    protected override async Task OnInitializedAsync()
    {
        // Subscribe to authentication state changes
        AuthStateProvider.AuthenticationStateChangedEvent += OnAuthenticationStateChanged;

        // Get initial authentication state
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        IsAuthenticated = authState.User.Identity.IsAuthenticated;

        // Call StateHasChanged to make sure the UI reflects the initial state
        StateHasChanged();
    }

    // This method handles authentication state changes
    private void OnAuthenticationStateChanged()
    {
        InvokeAsync(async () =>
        {
            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            IsAuthenticated = authState.User.Identity.IsAuthenticated;

            // Trigger re-render
            StateHasChanged();
        });
    }

    // This method handles logout logic
    private async Task Logout()
    {
        // Clear the stored token and notify the AuthStateProvider
        await LocalStorage.RemoveItemAsync("authToken");
        AuthStateProvider.NotifyUserLogout();

        // Update the authentication status and trigger re-render
        IsAuthenticated = false;
        StateHasChanged();
    }

    // This method unsubscribes from the event when the component is disposed
    public void Dispose()
    {
        AuthStateProvider.AuthenticationStateChangedEvent -= OnAuthenticationStateChanged;
    }
}
